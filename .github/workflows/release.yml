name: Generate v2ray routing rules

on:
  workflow_dispatch:
    inputs:
      PRE_RELEASE:
        description: "Set as pre-release"
        required: false
        type: boolean
        default: false
  schedule:
    - cron: "40 4 * * *"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repositories
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: .

      - name: Checkout additional branches
        run: |
          branches=("geolite2" "ip2location" "redundant")
          for branch in "${branches[@]}"; do
            git clone --single-branch --branch $branch https://github.com/${{ github.repository }} $branch
          done

      - name: Checkout external repositories
        run: |
          repos=("Chocolate4U/ito.gov.ir-Mirror" "v2fly/domain-list-community" "lord-alfred/ipranges")
          for repo in "${repos[@]}"; do
            git clone https://github.com/$repo.git $(basename $repo)
          done

      - name: Download geo-tools
        run: gh release download -p "*.tar.gz" --repo Chocolate4U/geo-tools
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set ENV variables
        run: |
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "RELEASE_DATE=$(date +'%A %F %T %Z')" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y dos2unix idn2

      - name: Create release directory
        run: mkdir -p release

      - name: Generate IP lists and domain files
        run: |
          # Get messengers IP list
          awk -F"," 'NR>1 {print $2}' ./ito.gov.ir-Mirror/data/Messengers.csv > messengers-ip.txt

          # Run scripts to generate various domain lists
          for script in generate-domestic-cdn-ips.sh generate-ir-domains.sh generate-ad-domains.sh \
                        generate-malware-domains-ips.sh generate-phishing-domains-ips.sh \
                        generate-cryptominer-domains.sh generate-social-media-domains.sh \
                        generate-nsfw-domains.sh; do
            chmod +x ./scripts/$script && ./scripts/$script
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate geoip files and verify *.mmdb files
        run: |
          tar -xvzf geoip.tar.gz && rm -rf ip2location/.git
          ./geoip convert -c config.json

          # Copy necessary files to release directory
          cp output/dat/*.dat release/
          cp output/maxmind/*.mmdb release/

      - name: Generate geosite files
        run: |
          tar -xvzf geosite.tar.gz

          # Copy generated files to v2ray-geosite data directory
          cp ./release/*.txt ./v2ray-geosite/data/

          # Generate geosite.dat, geosite-lite.dat, and security.dat files using geosite tool
          ./geosite --datapath=./v2ray-geosite/data --outputdir=./release --outputname=geosite.dat

          mkdir datalite security && \
            cp ./release/ir-lite.txt datalite/ir && \
            cp ./release/category-ads-all.txt security/category-ads-all && \
            cp ./release/malware.txt security/malware && \
            cp ./release/phishing.txt security/phishing && \
            cp ./release/cryptominers.txt security/cryptominers

          ./geosite --datapath=datalite --outputdir=./release --outputname=geosite-lite.dat && \
            ./geosite --datapath=security --outputdir=./release --outputname=security.dat

      - name: Generate SHA256 checksums
        run: |
          for file in release/*; do sha256sum "$file" > "$file.sha256sum"; done

      - name: Generate Release Notes
        run: echo "* Updated on ${{ env.RELEASE_DATE }}" > RELEASE_NOTES

      - name: Push assets to release branch
        if: ${{ !inputs.PRE_RELEASE }}
        run: |
          cd release || exit 1
          git init && git checkout -b release && git add . && git commit -m "${{ env.RELEASE_NAME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin release

      - name: Purge jsDelivr CDN cache
        if: ${{ !inputs.PRE_RELEASE }}
        run: |
          cd release || exit 1
          for file in *; do curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"; done

      - name: Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          body_path: RELEASE_NOTES
          draft: false
          prerelease: ${{ inputs.PRE_RELEASE }}
          files: |
            release/*.dat
            release/*.mmdb
            release/*.sha256sum
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean older releases
        if: ${{ !inputs.PRE_RELEASE }}
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          keep_latest: 7
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
