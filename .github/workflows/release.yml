name: Generate v2ray routing rules

on:
  workflow_dispatch:
  schedule:
    - cron: "30 5 * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: false

      - name: Set ENV variables
        run: |
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "RELEASE_DATE=$(date +'%F %T %Z')" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install dos2unix
          sudo apt-get install idn2

      - name: Create release directory
        run: mkdir release

      - name: Get messengers IP list
        run: |
          curl -sSL https://raw.githubusercontent.com/Chocolate4U/ito.gov.ir-Mirror/main/data/Messengers.csv | awk -F"," '{print $2}' | sed '1d' > messengers-ip.txt

      - name: Get GeoLite2
        env:
          LICENSE_KEY: ${{ secrets.MAXMIND_GEOLITE2_LICENSE }}
        run: |
          curl -sSL "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country-CSV&license_key=${LICENSE_KEY}&suffix=zip" -o GeoLite2-Country-CSV.zip
          unzip GeoLite2-Country-CSV.zip
          rm -f GeoLite2-Country-CSV.zip
          mv GeoLite2* geolite2

      - name: Generate ir domains list
        run: |
          echo -e "ir\nxn--mgba3a4f16a" > ir-temp.txt
          curl -sSL https://github.com/bootmortis/iran-hosted-domains/releases/latest/download/domains.txt > domains.txt
          cat domains.txt | grep -Ev ".+\.ir$" | cat - ir-temp.txt | sort -u > ir.txt
          echo "TOTAL_IR=$(cat ir.txt | wc -l)" >> $GITHUB_ENV
          rm -f ir-temp.txt
          mv ir.txt release

      - name: Generate ad domains list
        run: |
          curl -sSL https://raw.githubusercontent.com/MasterKia/PersianBlocker/main/PersianBlockerHosts.txt > ads-raw.txt
          curl -sSL https://raw.githubusercontent.com/hagezi/dns-blocklists/main/wildcard/light-onlydomains.txt >> ads-raw.txt
          curl -sSL https://pgl.yoyo.org/adservers/serverlist.php?hostformat=nohtml >> ads-raw.txt
          curl -sSL https://raw.githubusercontent.com/jerryn70/GoodbyeAds/master/Extension/GoodbyeAds-Samsung-AdBlock.txt >> ads-raw.txt
          curl -sSL https://raw.githubusercontent.com/jerryn70/GoodbyeAds/master/Extension/GoodbyeAds-Xiaomi-Extension.txt >> ads-raw.txt
          cat ads-raw.txt | sed -e 's/^\(|\|\*\|\.\|\-\|0\.0\.0\.0\|127\.0\.0\.1\)*//g' -e 's/\^.*$//g' -e '/!\|?\|@\|#\|\*\|_\|\\\|\/\|\[\|]\|\[\|\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/d' -e '/\.$/d' -e '/^\s*$/d' | awk '{$1=$1};1' | dos2unix | idn2 --no-alabelroundtrip --no-tr46 | sort -u > ads-temp.txt

          curl -sSL https://raw.githubusercontent.com/hagezi/dns-blocklists/main/whitelist.txt > whitelist-raw.txt
          curl -sSL https://raw.githubusercontent.com/hagezi/dns-blocklists/main/whitelist-referral.txt >> whitelist-raw.txt
          curl -sSL https://raw.githubusercontent.com/AdguardTeam/AdGuardSDNSFilter/master/Filters/exclusions.txt >> whitelist-raw.txt
          curl -sSL https://raw.githubusercontent.com/AdguardTeam/AdGuardSDNSFilter/master/Filters/exceptions.txt >> whitelist-raw.txt
          cat whitelist-raw.txt | sed -e 's/^\(|\|@\|\*\|\.\|\-\|0\.0\.0\.0\|127\.0\.0\.1\)*//g' -e 's/\^.*$//g' -e '/!\|?\|@\|#\|\*\|_\|\\\|\/\|\[\|]\|\[\|\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/d' -e '/\.$/d' -e '/^\s*$/d' | awk '{$1=$1};1' | dos2unix | idn2 --no-alabelroundtrip --no-tr46 | sort -u > whitelist-temp.txt

          comm -23 ads-temp.txt whitelist-temp.txt > ads.txt
          echo "TOTAL_ADS=$(cat ads.txt | wc -l)" >> $GITHUB_ENV
          rm -f ads-raw.txt whitelist-raw.txt ads-temp.txt whitelist-temp.txt
          mv ads.txt release

      - name: Generate malware domains list
        run: |
          curl -sSL https://urlhaus.abuse.ch/downloads/hostfile | sed -e 's/^\(|\|\*\|\.\|\-\|0\.0\.0\.0\|127\.0\.0\.1\)*//g' -e 's/\^.*$//g' -e '/!\|?\|@\|#\|\*\|_\|\\\|\/\|\[\|]\|\[\|\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/d' -e '/\.$/d' -e '/^\s*$/d' | awk '{$1=$1};1' | dos2unix | idn2 --no-alabelroundtrip --no-tr46 | sort -u > malware.txt
          echo "TOTAL_MALWARE=$(cat malware.txt | wc -l)" >> $GITHUB_ENV
          mv malware.txt release

      - name: Generate phishing domains list
        run: |
          curl -sSL https://malware-filter.gitlab.io/malware-filter/phishing-filter-hosts.txt | sed -e 's/^\(|\|\*\|\.\|\-\|0\.0\.0\.0\|127\.0\.0\.1\)*//g' -e 's/\^.*$//g' -e '/!\|?\|@\|#\|\*\|_\|\\\|\/\|\[\|]\|\[\|\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/d' -e '/\.$/d' -e '/^\s*$/d' | awk '{$1=$1};1' | dos2unix | idn2 --no-alabelroundtrip --no-tr46 | sort -u > phishing.txt
          echo "TOTAL_PHISHING=$(cat phishing.txt | wc -l)" >> $GITHUB_ENV
          mv phishing.txt release

      - name: Generate cryptominers domains list
        run: |
          curl -sSL https://raw.githubusercontent.com/hoshsadiq/adblock-nocoin-list/master/hosts.txt | sed -e 's/^\(|\|\*\|\.\|\-\|0\.0\.0\.0\|127\.0\.0\.1\)*//g' -e 's/\^.*$//g' -e '/!\|?\|@\|#\|\*\|_\|\\\|\/\|\[\|]\|\[\|\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/d' -e '/\.$/d' -e '/^\s*$/d' | awk '{$1=$1};1' | dos2unix | idn2 --no-alabelroundtrip --no-tr46 | sort -u > cryptominers.txt
          echo "TOTAL_CRYPTO=$(cat cryptominers.txt | wc -l)" >> $GITHUB_ENV
          mv cryptominers.txt release

      - name: Generate geoip.dat file
        run: |
          git clone https://github.com/v2fly/geoip.git
          cd geoip
          go run ./ -c ../config.json
          cp output/dat/geoip.dat ../release
          cp -fpPR output/text ../release

      - name: Generate geosite.dat file
        run: |
          git clone https://github.com/v2fly/domain-list-community
          mkdir -p v2ray/data/
          cp release/ir.txt v2ray/data/ir
          cp release/ads.txt v2ray/data/ads
          cp release/malware.txt v2ray/data/malware
          cp release/phishing.txt v2ray/data/phishing
          cp release/cryptominers.txt v2ray/data/cryptominers
          cd domain-list-community
          go run ./ --datapath=../v2ray/data --outputdir=../release --outputname=geosite.dat

      - name: Generate sha256sum
        run: |
          sha256sum release/geoip.dat > release/geoip.dat.sha256sum
          sha256sum release/geosite.dat > release/geosite.dat.sha256sum
      
      - name: Generate Release Notes
        run: | 
          echo "* Updated on ${{ env.RELEASE_DATE }}" > RELEASE_NOTES
          echo "* Number of IR Domains (Excluding .ir Domains) -> ${{ env.TOTAL_IR }}" >> RELEASE_NOTES
          echo "* Number of Ad Domains -> ${{ env.TOTAL_ADS }}" >> RELEASE_NOTES
          echo "* Number of Malware Domains -> ${{ env.TOTAL_MALWARE }}" >> RELEASE_NOTES
          echo "* Number of Phishing Domains -> ${{ env.TOTAL_PHISHING }}" >> RELEASE_NOTES
          echo "* Number of CryptoMiner Domains -> ${{ env.TOTAL_CRYPTO }}" >> RELEASE_NOTES

      - name: Push assets to release branch
        run: |
          cd release || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin release

      - name: Purge jsdelivr CDN cache
        run: |
          cd release || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done

      - name: Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          body_path: RELEASE_NOTES
          draft: false
          prerelease: false
          files: |
            release/geoip.dat
            release/geoip.dat.sha256sum
            release/geosite.dat
            release/geosite.dat.sha256sum
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      

